/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { InputChangeEventDetail } from "./components/br-input/br-input";
export { InputChangeEventDetail } from "./components/br-input/br-input";
export namespace Components {
    interface BrButton {
        "active": boolean;
        "autofocus": boolean;
        "density": 'small' | 'large' | '';
        "disabled": boolean;
        "emphasis": 'primary' | 'secondary' | '';
        "isBlock": boolean;
        "isCircle": boolean;
        "labelAria": string;
        "loading": boolean;
        "name": string;
        "type": 'button' | 'reset' | 'submit';
        "value": string;
    }
    interface BrInput {
        "autofocus": boolean;
        "density": 'small' | 'large' | '';
        "disabled": boolean;
        "id": string;
        "label": string;
        "placeholder": string;
        "readonly": boolean;
        "required": boolean;
        "type": | 'text'
    | 'password'
    | 'reset'
    | 'color'
    | 'email'
    | 'number'
    | 'search'
    | 'tel'
    | 'time'
    | 'url';
        "value": string;
    }
}
export interface BrButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBrButtonElement;
}
export interface BrInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBrInputElement;
}
declare global {
    interface HTMLBrButtonElement extends Components.BrButton, HTMLStencilElement {
    }
    var HTMLBrButtonElement: {
        prototype: HTMLBrButtonElement;
        new (): HTMLBrButtonElement;
    };
    interface HTMLBrInputElement extends Components.BrInput, HTMLStencilElement {
    }
    var HTMLBrInputElement: {
        prototype: HTMLBrInputElement;
        new (): HTMLBrInputElement;
    };
    interface HTMLElementTagNameMap {
        "br-button": HTMLBrButtonElement;
        "br-input": HTMLBrInputElement;
    }
}
declare namespace LocalJSX {
    interface BrButton {
        "active"?: boolean;
        "autofocus"?: boolean;
        "density"?: 'small' | 'large' | '';
        "disabled"?: boolean;
        "emphasis"?: 'primary' | 'secondary' | '';
        "isBlock"?: boolean;
        "isCircle"?: boolean;
        "labelAria"?: string;
        "loading"?: boolean;
        "name": string;
        "onComponentDidLoadEvent"?: (event: BrButtonCustomEvent<this>) => void;
        "onComponentDidRenderEvent"?: (event: BrButtonCustomEvent<this>) => void;
        "onComponentDidUpdateEvent"?: (event: BrButtonCustomEvent<this>) => void;
        "onComponentShouldUpdateEvent"?: (event: BrButtonCustomEvent<this>) => void;
        "onComponentWillLoadEvent"?: (event: BrButtonCustomEvent<this>) => void;
        "onComponentWillRenderEvent"?: (event: BrButtonCustomEvent<this>) => void;
        "onComponentWillUpdateEvent"?: (event: BrButtonCustomEvent<this>) => void;
        /**
          * Ciclo de vida https://stenciljs.com/docs/component-lifecycle
         */
        "onConnectedCallbackEvent"?: (event: BrButtonCustomEvent<this>) => void;
        "onDisconnectedCallbackEvent"?: (event: BrButtonCustomEvent<this>) => void;
        "type"?: 'button' | 'reset' | 'submit';
        "value"?: string;
    }
    interface BrInput {
        "autofocus"?: boolean;
        "density"?: 'small' | 'large' | '';
        "disabled"?: boolean;
        "id"?: string;
        "label"?: string;
        "onMyChange"?: (event: BrInputCustomEvent<InputChangeEventDetail>) => void;
        "placeholder"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "type"?: | 'text'
    | 'password'
    | 'reset'
    | 'color'
    | 'email'
    | 'number'
    | 'search'
    | 'tel'
    | 'time'
    | 'url';
        "value"?: string;
    }
    interface IntrinsicElements {
        "br-button": BrButton;
        "br-input": BrInput;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "br-button": LocalJSX.BrButton & JSXBase.HTMLAttributes<HTMLBrButtonElement>;
            "br-input": LocalJSX.BrInput & JSXBase.HTMLAttributes<HTMLBrInputElement>;
        }
    }
}
